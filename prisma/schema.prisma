generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employee {
  id           Int        @id @default(autoincrement())
  email        String     @unique @db.VarChar(30)
  password     String
  name         String     @db.VarChar(50)
  nid          String?    @db.VarChar(20)
  dob          DateTime   @db.Date
  workingPlase String?
  photo        String?
  address      String
  mobile       String     @db.VarChar(14)
  role         UserRole   @default(EMPLOYEE)
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([email])
  @@map("employees")
}

model Party {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(50)
  contactNo       String            @db.VarChar(15)
  address         String            @db.VarChar(200)
  partyType       PartyType
  isDeleted       Boolean           @default(false)
  TransactionInfo TransactionInfo[]
  logOrder        LogOrder[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([name])
  @@map("parties")
}

model Category {
  id           Int           @id @default(autoincrement())
  categoryName String        @unique @db.VarChar(200)
  SubCategory  SubCategory[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("categoris")
}

model SubCategory {
  id              Int       @id @default(autoincrement())
  subCategoryName String    @unique @db.VarChar(200)
  categoryId      Int
  category        Category  @relation(fields: [categoryId], references: [id])
  Product         Product[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([categoryId])
  @@map("sub_categoris")
}

model AccountMainPiller {
  id           Int            @id @default(autoincrement())
  pillerName   String
  pillerId     String         @unique @db.VarChar(2)
  AccountsItem AccountsItem[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("account_pillers")
}

model AccountsItem {
  id                  Int               @id @default(autoincrement())
  accountsItemName    String
  accountMainPillerId String            @db.VarChar(2)
  accountsItemId      String            @db.VarChar(4)
  journal             Journal[]
  accountsPiler       AccountMainPiller @relation(fields: [accountMainPillerId], references: [pillerId])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("account_items")
}

model Unit {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(20)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@map("unites")
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(100)
  description   String      @db.VarChar(250)
  subCategoryId Int
  minPrice      Int?
  color         String?
  size          String?
  itemType      ItemType    @default(PRODUCT)
  isDeleted     Boolean     @default(false)
  status        Status      @default(ACTIVE)
  Inventory     Inventory[]
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  createdAt     DateTime    @default(now())
  updateAt      DateTime    @updatedAt

  @@index([subCategoryId, name])
  @@map("products")
}

model RawMaterial {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(50)
  description String?     @db.VarChar(250)
  itemType    ItemType    @default(RAW_MATERIAL)
  isDeleted   Boolean     @default(false)
  status      Status      @default(ACTIVE)
  Inventory   Inventory[]
  createdAt   DateTime    @default(now())
  updateAt    DateTime    @updatedAt

  @@map("raw_materials")
}

model ClosingStock {
  id              Int         @id @default(autoincrement())
  inventoryItemId Int         @unique
  date            DateTime    @default(now())
  closingQuantity Int
  closingPrice    Decimal     @default(0.00) @db.Decimal(10, 2)
  Inventory       Inventory[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([date])
  @@map("closing_stock")
}

model Customer {
  id              Int               @id @default(autoincrement())
  name            String?
  contactNumber   String            @unique
  address         String?
  TransactionInfo TransactionInfo[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("customers")
}

model BankAccount {
  id              Int               @id @default(autoincrement())
  bankName        String
  branceName      String?
  accountNumber   String
  bankClosing     BankClosing?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  bankTransaction BankTransaction[]

  @@unique([bankName, accountNumber])
  @@map("bank_accounts")
}

model BankClosing {
  id            Int          @id @default(autoincrement())
  bankAccountId Int?         @unique
  date          DateTime     @default(now())
  closingAmount Decimal      @default(0.00) @db.Decimal(10, 2)
  bankAccount   BankAccount? @relation(fields: [bankAccountId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([date])
  @@map("bank_closing")
}

model BankTransaction {
  id              Int             @id @default(autoincrement())
  bankAccountId   Int
  debitAmount     Int?
  creditAmount    Int?
  transectionId   Int
  bankAccount     BankAccount     @relation(fields: [bankAccountId], references: [id])
  transactionInfo TransactionInfo @relation(fields: [transectionId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("bank_transactions")
}

model TransactionInfo {
  id              Int               @id @default(autoincrement())
  date            DateTime
  voucherNo       String            @unique
  invoiceNo       String?
  partyType       PartyType?
  partyId         Int?
  customerId      Int?
  voucherType     VoucherType
  paymentType     PaymentType?
  bankTransaction BankTransaction[]
  journal         Journal[]
  party           Party?            @relation(fields: [partyId], references: [id])
  customer        Customer?         @relation(fields: [customerId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([date, voucherNo, voucherType])
  @@map("transaction_info")
}

model Inventory {
  id              Int            @id @default(autoincrement())
  itemType        ItemType
  productId       Int?
  rawId           Int?
  createProductId Int?
  unitePrice      Float          @default(0.00)
  quantityAdd     Float?         @default(0.00)
  quantityLess    Float?         @default(0.00)
  discount        Float?         @default(0.00)
  closingStockId  Int?
  Journal         Journal[]
  product         Product?       @relation(fields: [productId], references: [id])
  ClosingStock    ClosingStock?  @relation(fields: [closingStockId], references: [id])
  raWMaterial     RawMaterial?   @relation(fields: [rawId], references: [id])
  CreateProduct   CreateProduct? @relation(fields: [createProductId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([productId, rawId, closingStockId, createProductId])
  @@map("inventories")
}

model Journal {
  id              Int              @id @default(autoincrement())
  transectionId   Int?
  accountsItemId  Int?
  inventoryItemId Int?
  logOrderId      Int?
  createProductId Int?
  creditAmount    Decimal?         @default(0.00) @db.Decimal(10, 2)
  debitAmount     Decimal?         @default(0.00) @db.Decimal(10, 2)
  narration       String?
  jurnaStatus     JurnaStatus      @default(UNCHECKED)
  LogOrder        LogOrder?        @relation(fields: [logOrderId], references: [id])
  transactionInfo TransactionInfo? @relation(fields: [transectionId], references: [id])
  accountsItem    AccountsItem?    @relation(fields: [accountsItemId], references: [id])
  inventoryItem   Inventory?       @relation(fields: [inventoryItemId], references: [id])
  CreateProduct   CreateProduct?   @relation(fields: [createProductId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("journals")
}

model LogCategory {
  id        Int         @id @default(autoincrement())
  name      String      @unique @db.VarChar(50)
  isDeleted Boolean     @default(false)
  logGrades LogGrades[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("logcategories")
}

model LogGrades {
  id              Int              @id @default(autoincrement())
  categoryId      Int
  gradeName       String           @db.VarChar(50)
  minRadius       Float            @db.Float()
  maxRadius       Float            @db.Float()
  unitePrice      Float
  isDeleted       Boolean          @default(false)
  logOrderItem    LogOrderItem[]
  logCategory     LogCategory      @relation(fields: [categoryId], references: [id])
  logGradeClosing LogGradeClosing?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([categoryId])
  @@map("logGrades")
}

model LogGradeClosing {
  id            Int        @id @default(autoincrement())
  date          DateTime   @default(now())
  logGradesId   Int        @unique
  closingArea   Float      @default(0.00)
  closingAmount Float      @default(0.00)
  logGrades     LogGrades? @relation(fields: [logGradesId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([date])
  @@map("log_grade_closing")
}

model LogOrder {
  id         Int            @id @default(autoincrement())
  supplierId Int
  chalanNo   String?        @db.VarChar(100)
  date       DateTime
  voucherNo  String         @unique @default("00") @db.VarChar(36)
  orderItem  LogOrderItem[]
  Journal    Journal[]
  party      Party          @relation(fields: [supplierId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@index([supplierId, date, voucherNo])
  @@map("log_orders")
}

model LogOrderItem {
  id           Int        @id @default(autoincrement())
  logOrderId   Int?
  logGradesId  Int?
  radis        Float?
  height       Float?
  addQuantity  Float?
  lessQuantity Float?
  u_price      Float
  debitAmount  Float?
  craditAmount Float?
  logGrades    LogGrades? @relation(fields: [logGradesId], references: [id])
  logOrder     LogOrder?  @relation(fields: [logOrderId], references: [id])

  @@index([logOrderId, logGradesId])
  @@map("log_Order_Items")
}

model CreateProduct {
  id        Int         @id @default(autoincrement())
  voucherNo String      @unique
  date      DateTime
  journal   Journal[]
  inventory Inventory[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum ItemType {
  PRODUCT
  RAW_MATERIAL
}

enum VoucherType {
  SALES
  PURCHASE
  RECEIPT
  PAYMENT
  JOURNAL
  CONTRA
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  EMPLOYEE
}

enum UserStatus {
  ACTIVE
  BLOCK
  DELETED
}

enum Status {
  IN_STOCK
  OUT_OF_STOCK
  ACTIVE
  DELETED
  PUSH
  BLOCK
}

enum PartyType {
  VENDOR
  CUSTOMER
  SUPPLIER
}

enum JurnaStatus {
  UNCHECKED
  CHECKED
  CLOSED
}

enum PaymentType {
  PAID
  DUE
  PARTIAL
}
