generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employee {
  id           Int        @id @unique @default(autoincrement())
  email        String     @unique @db.VarChar(30)
  password     String
  name         String     @db.VarChar(50)
  nid          String?    @db.VarChar(20)
  dob          DateTime   @db.Date()
  workingPlase String?
  photo        String?
  address      String
  mobile       String     @db.VarChar(14)
  role         UserRole   @default(EMPLOYEE)
  status       UserStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("employees")
}

model Party {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(50)
  contactNo String      @db.VarChar(15)
  address   String      @db.VarChar(200)
  partyType PartyType
  isDeleted Boolean     @default(false)
  journal   Journal[]
  Inventory Inventory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("parties")
}

model Category {
  id           Int           @id @unique @default(autoincrement())
  categoryName String        @unique @db.VarChar(200)
  SubCategory  SubCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categoris")
}

model SubCategory {
  id              Int      @id @unique @default(autoincrement())
  subCategoryName String   @unique @db.VarChar(200)
  categoryId      Int
  category        Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@map("sub_categoris")
}

model AccountMainPiller {
  id           Int            @id @unique @default(autoincrement())
  pillerName   String
  pillerId     String         @unique @db.VarChar(2)
  AccountsItem AccountsItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("account_pillers")
}

model AccountsItem {
  id                  Int               @id @default(autoincrement())
  accountsItemName    String
  accountsPiler       AccountMainPiller @relation(fields: [accountMainPillerId], references: [pillerId])
  accountMainPillerId String            @db.VarChar(2)
  accountsItemId      String            @db.VarChar(4)

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  journalsCredit Journal[] @relation(name: "CreditRelation")
  journalsDebit  Journal[] @relation(name: "DebitRelation")

  @@map("account_items")
}

model Unit {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(20)

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@map("unites")
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(100)
  description   String      @db.VarChar(250)
  subCategoryId Int
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  minPrice      Int?
  color         String?
  size          String?
  isDeleted     Boolean     @default(false)
  status        Status      @default(ACTIVE)

  createdAt DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  Inventory Inventory[]

  @@map("products")
}

model RawMaterial {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(50)
  description String? @db.VarChar(250)
  isDeleted   Boolean @default(false)
  status      Status  @default(ACTIVE)

  createdAt DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  Inventory Inventory[]

  @@map("raw_materials")
}

model Inventory {
  id             Int           @id @default(autoincrement())
  type           ItemType
  rawOrProductId Int
  raWMaterial    RawMaterial?  @relation(fields: [rawOrProductId], references: [id], map: "inventories_raw_materials_fk")
  product        Product?      @relation(fields: [rawOrProductId], references: [id], map: "inventories_customerId_fk")
  Party          Party?        @relation(fields: [partyId], references: [id])
  partyId        Int?
  unitePrice     Decimal       @default(0.00)
  quantityAdd    Decimal?      @default(0.00)
  quantityLess   Decimal?      @default(0.00)
  closingStocks  ClosingStock? @relation("InventoryItemToClosingStock")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Journal Journal[]

  @@map("inventories")
}

model ClosingStock {
  id              Int       @id @default(autoincrement())
  inventoryItemId Int       @unique
  date            DateTime  @default(now())
  closingQuantity Int
  closingPrice    Decimal
  inventoryItem   Inventory @relation(fields: [inventoryItemId], references: [id], name: "InventoryItemToClosingStock")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Customer {
  id            Int       @id @default(autoincrement())
  name          String?
  contactNumber String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  journal       Journal[]

  @@map("customers")
}

model BankAccount {
  id              Int               @id @default(autoincrement())
  bankName        String
  branceName      String?
  accountNumber   String
  bankClosing     BankClosing?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  bankTransaction BankTransaction[]
}

model BankClosing {
  id            Int         @id @default(autoincrement())
  bankAccountId Int         @unique
  date          DateTime    @default(now())
  closingAmount Decimal     @default(0.00)
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model BankTransaction {
  id            Int         @id @default(autoincrement())
  bankAccountId Int
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  debitAmount   Int
  creditAmount  Int
}

model Journal {
  id                Int        @id @default(autoincrement())
  date              DateTime
  invoiceNo         String     @unique
  bankTxId          String
  partyType         PartyType?
  partyOrcustomerId Int?
  party             Party?     @relation(fields: [partyOrcustomerId], references: [id], map: "journals_partyId_fk")
  customer          Customer?  @relation(fields: [partyOrcustomerId], references: [id], map: "journals_customerId_fk")

  debitAccountsItemId Int?
  debitAccountsItem   AccountsItem? @relation(name: "DebitRelation", fields: [debitAccountsItemId], references: [id])

  creditAccountsItemId Int?
  creditAccountsItem   AccountsItem? @relation(name: "CreditRelation", fields: [creditAccountsItemId], references: [id])

  inventoryItemId Int?
  inventoryItem   Inventory? @relation(fields: [inventoryItemId], references: [id], map: "journals_inventoryItemId_fk")

  creditAmount Decimal? @default(0.00)
  debitAmount  Decimal? @default(0.00)
  narration    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("journals")
}

enum ItemType {
  PRODUCT
  RAW_MATERIAL
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  EMPLOYEE
}

enum UserStatus {
  ACTIVE
  BLOCK
  DELETED
}

enum Status {
  ACTIVE
  DELETED
  PUSH
  BLOCK
}

enum PartyType {
  VENDOR
  CUSTOMER
  SUPPLIER
}
